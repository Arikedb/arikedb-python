# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import arikedb.arike_auth_pb2 as arike__auth__pb2
import arikedb.arike_collection_pb2 as arike__collection__pb2
import arikedb.arike_fifo_pb2 as arike__fifo__pb2
import arikedb.arike_sorted_list_pb2 as arike__sorted__list__pb2
import arikedb.arike_stack_pb2 as arike__stack__pb2
import arikedb.arike_ts_variable_pb2 as arike__ts__variable__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in arike_main_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ArikedbRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollections = channel.unary_unary(
                '/arike_pb.ArikedbRPC/CreateCollections',
                request_serializer=arike__collection__pb2.CreateCollectionsRequest.SerializeToString,
                response_deserializer=arike__collection__pb2.CreateCollectionsResponse.FromString,
                _registered_method=True)
        self.DeleteCollections = channel.unary_unary(
                '/arike_pb.ArikedbRPC/DeleteCollections',
                request_serializer=arike__collection__pb2.DeleteCollectionsRequest.SerializeToString,
                response_deserializer=arike__collection__pb2.DeleteCollectionsResponse.FromString,
                _registered_method=True)
        self.ListCollections = channel.unary_unary(
                '/arike_pb.ArikedbRPC/ListCollections',
                request_serializer=arike__collection__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=arike__collection__pb2.ListCollectionsResponse.FromString,
                _registered_method=True)
        self.CreateVariables = channel.unary_unary(
                '/arike_pb.ArikedbRPC/CreateVariables',
                request_serializer=arike__ts__variable__pb2.CreateVariablesRequest.SerializeToString,
                response_deserializer=arike__ts__variable__pb2.CreateVariablesResponse.FromString,
                _registered_method=True)
        self.DeleteVariables = channel.unary_unary(
                '/arike_pb.ArikedbRPC/DeleteVariables',
                request_serializer=arike__ts__variable__pb2.DeleteVariablesRequest.SerializeToString,
                response_deserializer=arike__ts__variable__pb2.DeleteVariablesResponse.FromString,
                _registered_method=True)
        self.ListVariables = channel.unary_unary(
                '/arike_pb.ArikedbRPC/ListVariables',
                request_serializer=arike__ts__variable__pb2.ListVariablesRequest.SerializeToString,
                response_deserializer=arike__ts__variable__pb2.ListVariablesResponse.FromString,
                _registered_method=True)
        self.SetVariables = channel.unary_unary(
                '/arike_pb.ArikedbRPC/SetVariables',
                request_serializer=arike__ts__variable__pb2.SetVariablesRequest.SerializeToString,
                response_deserializer=arike__ts__variable__pb2.SetVariablesResponse.FromString,
                _registered_method=True)
        self.GetVariables = channel.unary_unary(
                '/arike_pb.ArikedbRPC/GetVariables',
                request_serializer=arike__ts__variable__pb2.GetVariablesRequest.SerializeToString,
                response_deserializer=arike__ts__variable__pb2.GetVariablesResponse.FromString,
                _registered_method=True)
        self.SubscribeVariables = channel.unary_stream(
                '/arike_pb.ArikedbRPC/SubscribeVariables',
                request_serializer=arike__ts__variable__pb2.SubscribeVariablesRequest.SerializeToString,
                response_deserializer=arike__ts__variable__pb2.TsVarValue.FromString,
                _registered_method=True)
        self.CreateStacks = channel.unary_unary(
                '/arike_pb.ArikedbRPC/CreateStacks',
                request_serializer=arike__stack__pb2.CreateStacksRequest.SerializeToString,
                response_deserializer=arike__stack__pb2.CreateStacksResponse.FromString,
                _registered_method=True)
        self.DeleteStacks = channel.unary_unary(
                '/arike_pb.ArikedbRPC/DeleteStacks',
                request_serializer=arike__stack__pb2.DeleteStacksRequest.SerializeToString,
                response_deserializer=arike__stack__pb2.DeleteStacksResponse.FromString,
                _registered_method=True)
        self.ListStacks = channel.unary_unary(
                '/arike_pb.ArikedbRPC/ListStacks',
                request_serializer=arike__stack__pb2.ListStacksRequest.SerializeToString,
                response_deserializer=arike__stack__pb2.ListStacksResponse.FromString,
                _registered_method=True)
        self.PutStacks = channel.unary_unary(
                '/arike_pb.ArikedbRPC/PutStacks',
                request_serializer=arike__stack__pb2.PutStacksRequest.SerializeToString,
                response_deserializer=arike__stack__pb2.PutStacksResponse.FromString,
                _registered_method=True)
        self.PopStacks = channel.unary_unary(
                '/arike_pb.ArikedbRPC/PopStacks',
                request_serializer=arike__stack__pb2.PopStacksRequest.SerializeToString,
                response_deserializer=arike__stack__pb2.PopStacksResponse.FromString,
                _registered_method=True)
        self.CreateFifos = channel.unary_unary(
                '/arike_pb.ArikedbRPC/CreateFifos',
                request_serializer=arike__fifo__pb2.CreateFifosRequest.SerializeToString,
                response_deserializer=arike__fifo__pb2.CreateFifosResponse.FromString,
                _registered_method=True)
        self.DeleteFifos = channel.unary_unary(
                '/arike_pb.ArikedbRPC/DeleteFifos',
                request_serializer=arike__fifo__pb2.DeleteFifosRequest.SerializeToString,
                response_deserializer=arike__fifo__pb2.DeleteFifosResponse.FromString,
                _registered_method=True)
        self.ListFifos = channel.unary_unary(
                '/arike_pb.ArikedbRPC/ListFifos',
                request_serializer=arike__fifo__pb2.ListFifosRequest.SerializeToString,
                response_deserializer=arike__fifo__pb2.ListFifosResponse.FromString,
                _registered_method=True)
        self.PushFifos = channel.unary_unary(
                '/arike_pb.ArikedbRPC/PushFifos',
                request_serializer=arike__fifo__pb2.PushFifosRequest.SerializeToString,
                response_deserializer=arike__fifo__pb2.PushFifosResponse.FromString,
                _registered_method=True)
        self.PullFifos = channel.unary_unary(
                '/arike_pb.ArikedbRPC/PullFifos',
                request_serializer=arike__fifo__pb2.PullFifosRequest.SerializeToString,
                response_deserializer=arike__fifo__pb2.PullFifosResponse.FromString,
                _registered_method=True)
        self.CreateSortedLists = channel.unary_unary(
                '/arike_pb.ArikedbRPC/CreateSortedLists',
                request_serializer=arike__sorted__list__pb2.CreateSortedListsRequest.SerializeToString,
                response_deserializer=arike__sorted__list__pb2.CreateSortedListsResponse.FromString,
                _registered_method=True)
        self.DeleteSortedLists = channel.unary_unary(
                '/arike_pb.ArikedbRPC/DeleteSortedLists',
                request_serializer=arike__sorted__list__pb2.DeleteSortedListsRequest.SerializeToString,
                response_deserializer=arike__sorted__list__pb2.DeleteSortedListsResponse.FromString,
                _registered_method=True)
        self.ListSortedLists = channel.unary_unary(
                '/arike_pb.ArikedbRPC/ListSortedLists',
                request_serializer=arike__sorted__list__pb2.ListSortedListsRequest.SerializeToString,
                response_deserializer=arike__sorted__list__pb2.ListSortedListsResponse.FromString,
                _registered_method=True)
        self.InsertSortedLists = channel.unary_unary(
                '/arike_pb.ArikedbRPC/InsertSortedLists',
                request_serializer=arike__sorted__list__pb2.InsertSortedListsRequest.SerializeToString,
                response_deserializer=arike__sorted__list__pb2.InsertSortedListsResponse.FromString,
                _registered_method=True)
        self.BiggestSortedLists = channel.unary_unary(
                '/arike_pb.ArikedbRPC/BiggestSortedLists',
                request_serializer=arike__sorted__list__pb2.BiggestSortedListsRequest.SerializeToString,
                response_deserializer=arike__sorted__list__pb2.BiggestSortedListsResponse.FromString,
                _registered_method=True)
        self.SmallestSortedLists = channel.unary_unary(
                '/arike_pb.ArikedbRPC/SmallestSortedLists',
                request_serializer=arike__sorted__list__pb2.SmallestSortedListsRequest.SerializeToString,
                response_deserializer=arike__sorted__list__pb2.SmallestSortedListsResponse.FromString,
                _registered_method=True)
        self.Authenticate = channel.unary_unary(
                '/arike_pb.ArikedbRPC/Authenticate',
                request_serializer=arike__auth__pb2.AuthenticateRequest.SerializeToString,
                response_deserializer=arike__auth__pb2.AuthenticateResponse.FromString,
                _registered_method=True)


class ArikedbRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeVariables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteStacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutStacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PopStacks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFifos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFifos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFifos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushFifos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullFifos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSortedLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSortedLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSortedLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertSortedLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiggestSortedLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SmallestSortedLists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authenticate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArikedbRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollections,
                    request_deserializer=arike__collection__pb2.CreateCollectionsRequest.FromString,
                    response_serializer=arike__collection__pb2.CreateCollectionsResponse.SerializeToString,
            ),
            'DeleteCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollections,
                    request_deserializer=arike__collection__pb2.DeleteCollectionsRequest.FromString,
                    response_serializer=arike__collection__pb2.DeleteCollectionsResponse.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=arike__collection__pb2.ListCollectionsRequest.FromString,
                    response_serializer=arike__collection__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'CreateVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVariables,
                    request_deserializer=arike__ts__variable__pb2.CreateVariablesRequest.FromString,
                    response_serializer=arike__ts__variable__pb2.CreateVariablesResponse.SerializeToString,
            ),
            'DeleteVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVariables,
                    request_deserializer=arike__ts__variable__pb2.DeleteVariablesRequest.FromString,
                    response_serializer=arike__ts__variable__pb2.DeleteVariablesResponse.SerializeToString,
            ),
            'ListVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.ListVariables,
                    request_deserializer=arike__ts__variable__pb2.ListVariablesRequest.FromString,
                    response_serializer=arike__ts__variable__pb2.ListVariablesResponse.SerializeToString,
            ),
            'SetVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVariables,
                    request_deserializer=arike__ts__variable__pb2.SetVariablesRequest.FromString,
                    response_serializer=arike__ts__variable__pb2.SetVariablesResponse.SerializeToString,
            ),
            'GetVariables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVariables,
                    request_deserializer=arike__ts__variable__pb2.GetVariablesRequest.FromString,
                    response_serializer=arike__ts__variable__pb2.GetVariablesResponse.SerializeToString,
            ),
            'SubscribeVariables': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeVariables,
                    request_deserializer=arike__ts__variable__pb2.SubscribeVariablesRequest.FromString,
                    response_serializer=arike__ts__variable__pb2.TsVarValue.SerializeToString,
            ),
            'CreateStacks': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStacks,
                    request_deserializer=arike__stack__pb2.CreateStacksRequest.FromString,
                    response_serializer=arike__stack__pb2.CreateStacksResponse.SerializeToString,
            ),
            'DeleteStacks': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteStacks,
                    request_deserializer=arike__stack__pb2.DeleteStacksRequest.FromString,
                    response_serializer=arike__stack__pb2.DeleteStacksResponse.SerializeToString,
            ),
            'ListStacks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStacks,
                    request_deserializer=arike__stack__pb2.ListStacksRequest.FromString,
                    response_serializer=arike__stack__pb2.ListStacksResponse.SerializeToString,
            ),
            'PutStacks': grpc.unary_unary_rpc_method_handler(
                    servicer.PutStacks,
                    request_deserializer=arike__stack__pb2.PutStacksRequest.FromString,
                    response_serializer=arike__stack__pb2.PutStacksResponse.SerializeToString,
            ),
            'PopStacks': grpc.unary_unary_rpc_method_handler(
                    servicer.PopStacks,
                    request_deserializer=arike__stack__pb2.PopStacksRequest.FromString,
                    response_serializer=arike__stack__pb2.PopStacksResponse.SerializeToString,
            ),
            'CreateFifos': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFifos,
                    request_deserializer=arike__fifo__pb2.CreateFifosRequest.FromString,
                    response_serializer=arike__fifo__pb2.CreateFifosResponse.SerializeToString,
            ),
            'DeleteFifos': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFifos,
                    request_deserializer=arike__fifo__pb2.DeleteFifosRequest.FromString,
                    response_serializer=arike__fifo__pb2.DeleteFifosResponse.SerializeToString,
            ),
            'ListFifos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFifos,
                    request_deserializer=arike__fifo__pb2.ListFifosRequest.FromString,
                    response_serializer=arike__fifo__pb2.ListFifosResponse.SerializeToString,
            ),
            'PushFifos': grpc.unary_unary_rpc_method_handler(
                    servicer.PushFifos,
                    request_deserializer=arike__fifo__pb2.PushFifosRequest.FromString,
                    response_serializer=arike__fifo__pb2.PushFifosResponse.SerializeToString,
            ),
            'PullFifos': grpc.unary_unary_rpc_method_handler(
                    servicer.PullFifos,
                    request_deserializer=arike__fifo__pb2.PullFifosRequest.FromString,
                    response_serializer=arike__fifo__pb2.PullFifosResponse.SerializeToString,
            ),
            'CreateSortedLists': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSortedLists,
                    request_deserializer=arike__sorted__list__pb2.CreateSortedListsRequest.FromString,
                    response_serializer=arike__sorted__list__pb2.CreateSortedListsResponse.SerializeToString,
            ),
            'DeleteSortedLists': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSortedLists,
                    request_deserializer=arike__sorted__list__pb2.DeleteSortedListsRequest.FromString,
                    response_serializer=arike__sorted__list__pb2.DeleteSortedListsResponse.SerializeToString,
            ),
            'ListSortedLists': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSortedLists,
                    request_deserializer=arike__sorted__list__pb2.ListSortedListsRequest.FromString,
                    response_serializer=arike__sorted__list__pb2.ListSortedListsResponse.SerializeToString,
            ),
            'InsertSortedLists': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertSortedLists,
                    request_deserializer=arike__sorted__list__pb2.InsertSortedListsRequest.FromString,
                    response_serializer=arike__sorted__list__pb2.InsertSortedListsResponse.SerializeToString,
            ),
            'BiggestSortedLists': grpc.unary_unary_rpc_method_handler(
                    servicer.BiggestSortedLists,
                    request_deserializer=arike__sorted__list__pb2.BiggestSortedListsRequest.FromString,
                    response_serializer=arike__sorted__list__pb2.BiggestSortedListsResponse.SerializeToString,
            ),
            'SmallestSortedLists': grpc.unary_unary_rpc_method_handler(
                    servicer.SmallestSortedLists,
                    request_deserializer=arike__sorted__list__pb2.SmallestSortedListsRequest.FromString,
                    response_serializer=arike__sorted__list__pb2.SmallestSortedListsResponse.SerializeToString,
            ),
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=arike__auth__pb2.AuthenticateRequest.FromString,
                    response_serializer=arike__auth__pb2.AuthenticateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arike_pb.ArikedbRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arike_pb.ArikedbRPC', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ArikedbRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/CreateCollections',
            arike__collection__pb2.CreateCollectionsRequest.SerializeToString,
            arike__collection__pb2.CreateCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/DeleteCollections',
            arike__collection__pb2.DeleteCollectionsRequest.SerializeToString,
            arike__collection__pb2.DeleteCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/ListCollections',
            arike__collection__pb2.ListCollectionsRequest.SerializeToString,
            arike__collection__pb2.ListCollectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/CreateVariables',
            arike__ts__variable__pb2.CreateVariablesRequest.SerializeToString,
            arike__ts__variable__pb2.CreateVariablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/DeleteVariables',
            arike__ts__variable__pb2.DeleteVariablesRequest.SerializeToString,
            arike__ts__variable__pb2.DeleteVariablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/ListVariables',
            arike__ts__variable__pb2.ListVariablesRequest.SerializeToString,
            arike__ts__variable__pb2.ListVariablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/SetVariables',
            arike__ts__variable__pb2.SetVariablesRequest.SerializeToString,
            arike__ts__variable__pb2.SetVariablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/GetVariables',
            arike__ts__variable__pb2.GetVariablesRequest.SerializeToString,
            arike__ts__variable__pb2.GetVariablesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeVariables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/arike_pb.ArikedbRPC/SubscribeVariables',
            arike__ts__variable__pb2.SubscribeVariablesRequest.SerializeToString,
            arike__ts__variable__pb2.TsVarValue.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateStacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/CreateStacks',
            arike__stack__pb2.CreateStacksRequest.SerializeToString,
            arike__stack__pb2.CreateStacksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteStacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/DeleteStacks',
            arike__stack__pb2.DeleteStacksRequest.SerializeToString,
            arike__stack__pb2.DeleteStacksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListStacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/ListStacks',
            arike__stack__pb2.ListStacksRequest.SerializeToString,
            arike__stack__pb2.ListStacksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PutStacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/PutStacks',
            arike__stack__pb2.PutStacksRequest.SerializeToString,
            arike__stack__pb2.PutStacksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PopStacks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/PopStacks',
            arike__stack__pb2.PopStacksRequest.SerializeToString,
            arike__stack__pb2.PopStacksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateFifos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/CreateFifos',
            arike__fifo__pb2.CreateFifosRequest.SerializeToString,
            arike__fifo__pb2.CreateFifosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFifos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/DeleteFifos',
            arike__fifo__pb2.DeleteFifosRequest.SerializeToString,
            arike__fifo__pb2.DeleteFifosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFifos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/ListFifos',
            arike__fifo__pb2.ListFifosRequest.SerializeToString,
            arike__fifo__pb2.ListFifosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PushFifos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/PushFifos',
            arike__fifo__pb2.PushFifosRequest.SerializeToString,
            arike__fifo__pb2.PushFifosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullFifos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/PullFifos',
            arike__fifo__pb2.PullFifosRequest.SerializeToString,
            arike__fifo__pb2.PullFifosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSortedLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/CreateSortedLists',
            arike__sorted__list__pb2.CreateSortedListsRequest.SerializeToString,
            arike__sorted__list__pb2.CreateSortedListsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSortedLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/DeleteSortedLists',
            arike__sorted__list__pb2.DeleteSortedListsRequest.SerializeToString,
            arike__sorted__list__pb2.DeleteSortedListsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSortedLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/ListSortedLists',
            arike__sorted__list__pb2.ListSortedListsRequest.SerializeToString,
            arike__sorted__list__pb2.ListSortedListsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertSortedLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/InsertSortedLists',
            arike__sorted__list__pb2.InsertSortedListsRequest.SerializeToString,
            arike__sorted__list__pb2.InsertSortedListsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BiggestSortedLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/BiggestSortedLists',
            arike__sorted__list__pb2.BiggestSortedListsRequest.SerializeToString,
            arike__sorted__list__pb2.BiggestSortedListsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SmallestSortedLists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/SmallestSortedLists',
            arike__sorted__list__pb2.SmallestSortedListsRequest.SerializeToString,
            arike__sorted__list__pb2.SmallestSortedListsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arike_pb.ArikedbRPC/Authenticate',
            arike__auth__pb2.AuthenticateRequest.SerializeToString,
            arike__auth__pb2.AuthenticateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
